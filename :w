import logging
from collections import defaultdict

from django.db import transaction

from .githubapis import (
    fetch_installation,
    fetch_issues,
    fetch_repository,
    get_pr_diff,
    post_pr_comment
)
from .parsers import parse_pr_diff

logger = logging.getLogger(__name__)

COMMENT_TEMPLATE = """<details>
<summary><a href="{0[0]}">{0[1]}</a></summary>
<pre>
<code>
{0[2]}
</code>
</pre>
</details>
"""


def build_pr_comment(data):
    """ GitHubに投稿するメッセージを作成する """
    # GitHubのMarkdownのHTML埋め込みはtarget="_brank" が効かない
    # https://github.com/mojombo/github-flavored-markdown/issues/28
    header = 'コード内のリンク一覧\n'
    for filename, permalinks in data.items():
        body.append(f'## {filename}')
        for p in permalinks:
            body.append(COMMENT_TEMPLATE.format(p))

    msg = header + '\n'.join(body)
    return msg


class GithubApp:

    def __init__(self,
                 installation_repo,
                 repository_repo,
                 repository_installation_repo,
                 issue_repo,
                 permalink_repo):

        self.installation_repo = installation_repo
        self.repository_repo = repository_repo
        self.repository_installation_repo = repository_installation_repo
        self.issue_repo = issue_repo
        self.permalink_repo = permalink_repo

    def cooperation(self, project_id, installation_id, full_name):
        """ Github連携

        1. APIからinstallation 情報取得
        2. APIからrepositoryの 情報取得
        3. installation作成 (既に作成済の場合は作成しない)
        4. repository作成 (既に作成済の場合は作成しない)
        5. repository_installation作成
        6. repositoryが新規作成された場合はissue取り込み

        :param int installation_id: GithubInstallation.installation_id
        """
        installation_data = fetch_installation(installation_id)
        repository_data = fetch_repository(installation_id, full_name)
        if not (installation_data or repository_data):
            return

        installation_data['project_id'] = project_id
        installation_data['installation_id'] = installation_id
        with transaction.atomic():
            installation, _ = self.installation_repo.get_or_create(**installation_data)
            repository, created = self.repository_repo.get_or_create(**repository_data)
            repository_installation = self.repository_installation_repo.create(
                installation=installation,
                repository=repository
            )

            if created:
                self.load_issues(installation_id, repository.id)

        logger.info('GitHub cooperate ins: {} full_name: {} repo_ins: {} project: {}'.format(
            installation_id,
            full_name,
            repository_installation.id,
            project_id
        ))

    def get_repositories(self, installation_pk):
        """ installationに紐づくリポジトリを取得する

        :param int installation_pk: GithubInstallation.id
        """
        repository_ids = [
            ri.repository.id for ri in self.repository_installation_repo.get_by_installation_pk(
                installation_pk
            )
        ]
        return self.repository_repo.model.objects.filter(id__in=repository_ids)

    def remove_repositories(self, repositories):
        """ Installationに紐づくリポジトリーがGitHub側で削除されたら更新 """
        with transaction.atomic():
            for r in repositories:
                repository = self.repository_repo.get_by_node_id(r['node_id'])
                if repository:
                    self.repository_installation_repo.get_by_repository_id(
                        repository.id
                    ).delete()
                    logger.info(f'GitHub: Remove repository {repository.id}')
                    repository.delete()

    def uninstall(self, installation_id):
        """ installation_idに関連するモデルを削除する

        :param int installation_id: GithubInstallation.installation_id
        """
        installations = self.installation_repo.get_by_installation_id(installation_id)

        with transaction.atomic():
            repository_ids = set()
            for installation in installations:
                repository_installation = self.repository_installation_repo.get_by_installation_pk(
                    installation.id
                )
                for ri in repository_installation:
                    repository_ids.add(ri.repository.id)
                    ri.delete()
                installation.delete()
                logger.info(f'GitHub: Delete GithubInstallation {installation_id}')
            self.repository_repo.model.objects.filter(id__in=repository_ids).delete()

    def deactivate_installation(self, installation_pk):
        """ プロジェクトのInstallationに関連するモデルを削除する

        * GitHub連携設定画面でユーザーがオーガナイゼーションの連携解除

        :param int installation_pk: GithubInstallation.id
        """
        installation = self.installation_repo.get(installation_pk)
        repository_installations = self.repository_installation_repo.get_by_installation_pk(
            installation
        )

        with transaction.atomic():
            for ri in repository_installations:
                repository = ri.repository
                ri.delete()
                if repository.installations.count() == 0:
                    repository.delete()

            installation.delete()
            logger.info(f'GitHub: Deactivate Installation {installation_pk}')

    def deactivate_repository(self, installation_pk, repository_id):
        """ プロジェクトのリポジトリを削除する

        * GitHub連携設定画面でユーザーがリポジトリの連携解除

        :param int installation_pk: GithubInstallation.id
        """
        qs = self.repository_installation_repo.get_by_installation_pk(installation_pk)
        with transaction.atomic():
            qs.filter(repository=repository_id).delete()

            # 他のプロジェクトに紐付いていなかったらリポジトリを削除
            if not self.repository_installation_repo.get_by_repository_id(repository_id):
                repository = self.repository_repo.get(repository_id)
                repository.delete()

            logger.info(f'GitHub: Deactivate repository {repository_id}')

    def load_issues(self, installation_id, repository_id):
        """ リポジトリのIssue一覧をDBに格納する

        :param int installation_id: GithubInstallation.installation_id
        """
        repository = self.repository_repo.get(repository_id)

        issue_objects = []
        # APIからIssue/PR一覧を取得
        issues = fetch_issues(installation_id, repository.full_name)

        for issue in issues:
            issue['repository'] = repository
            issue_objects.append(
                self.issue_repo.model(
                    **issue
                )
            )
        if issue_objects:
            with transaction.atomic():
                logger.info(f'Github: Create Issues {len(issue_objects)}')
                self.issue_repo.bulk_create(issue_objects)

    def update_issue(self, issue_info, issue_node_id, repository_node_id):
        """ Issue/PR を新規作成 or 更新する """

        issue = self.issue_repo.get_by_node_id(issue_node_id)
        repository = self.repository_repo.get_by_node_id(repository_node_id)
        issue_info['repository_id'] = repository.id

        if issue:
            logger.info(f'GitHub: Update issue: {issue.id}')
            self.issue_repo.update(issue, issue_info)
        else:
            logger.info(f'GitHub: New issue: {issue_info.get("node_id")}')
            self.issue_repo.create(**issue_info)

    def analyze_pull_request(self, data, url):
        """ TRACERYのURLがPRのDiffに含まれていたらコメントする """
        installation_id = data['installation']['id']
        pr = data['pull_request']
        diff_url = pr['diff_url']
        diff = get_pr_diff(installation_id, diff_url)
        links = parse_pr_diff(diff, url)
        print(links)
        permalinks = {p.uid: p for p in self.permalink_repo.get_by_uids(links.keys())}
        print(permalinks)

        if not permalinks:
            logger.debug(f'GitHub: Not found permalink {url}')
            return

        # 存在するパーマリンクかチェックしてファイルごとに並び替える
        data = defaultdict(list)
        for uid, filenames in links.item():
            if not permalinks.get(uid):
                continue
            p = permalinks.get(uid)
            url = p.item.get_absolute_url()
            code = p.item.get_parmakink_code()
            title = p.item.get_permalink_title()
            for fn in filenames:
                data[fn].append((url, code, title))

        print(data)
        msg = build_pr_comment(data)
        print(msg)

        issue = self.issue_repo.get_by_node_id(pr['node_id'])
        comment_id = post_pr_comment(installation_id, msg, pr, issue.comment_id)

        self.issue_repo.update(issue, {'comment_id': comment_id})
