---
title: Awesome Python：素晴らしい Python フレームワーク・ライブラリ・ソフトウェア・リソースの数々
tags: Python Python3 pip Python2
author: hatai
slide: false
---
元記事: [Awesome Python](https://github.com/vinta/awesome-python)

## Awesome List in Qiita

* [Awesome Ruby](../items/62766145f2e24fa1c246)
* [Awesome Java](../items/7868996e3eb5fa55f11a)
* [Awesome JavaScript](../items/5bf899bfe8f5d86d2096)
* [Awesome Node.js](../items/61030176a254cbe7ff2b)
* [Awesome Go](../items/f31914f37dc6c53b2bce)
* [Awesome Selenium](../items/a4cbff763b9ee8a7879a)
* [Awesome Appium](../items/6b58353e0ab682ed00f1)


## 管理パネル

*管理インタフェース用ライブラリ*

* [ajenti](https://github.com/ajenti/ajenti) - サーバ用管理パネル.
* [django-grappelli](http://grappelliproject.com/) - Django 管理インターフェースのためのジャズスキン.
* [django-jet](https://github.com/geex-arts/django-jet) - 改良された機能を備えた Django 管理インターフェース用の最新のレスポンシブテンプレート.
* [django-suit](http://djangosuit.com/) - Django Admin インターフェースの代替 (非商用の場合のみ無料).
* [django-xadmin](https://github.com/sshwsfc/xadmin) - Django 管理者のドロップイン置換.
* [jet-bridge](https://github.com/jet-admin/jet-bridge) - すてきな UI を備えたアプリケーション（Jet Django など）の管理パネルフレームワーク.
* [flask-admin](https://github.com/flask-admin/flask-admin) - Flask のためのシンプルで拡張可能な管理インタフェースフレームワーク.
* [flower](https://github.com/mher/flower) - Celery のためのリアルタイムモニタと Web 管理インターフェース.
* [Wooey](https://github.com/wooey/wooey) - 自動で Web UI を作成できる Django アプリケーション.


## アルゴリズム及びデザインパターン

*Pythonのアルゴリズムとデザインパターンの実装*

* [algorithms](https://github.com/keon/algorithms) - Python のデータ構造とアルゴリズムの小さな例.
* [PyPattyrn](https://github.com/tylerlaberge/PyPattyrn) - 共通のデザインパターンを実装するためのシンプルで効果的なライブラリ.
* [python-patterns](https://github.com/faif/python-patterns) - Pythonでのデザインパターンのコレクション.

* [sortedcontainers](https://github.com/grantjenks/python-sortedcontainers) - SortedList, SortedDict, および SortedSet 型の高速で純粋なPython実装.
* [SCOOP](https://github.com/soravux/scoop) - Python でのスケーラブルな並行操作.


## オーディオ

*オーディオとオーディオメタデータを操作するためのライブラリ*

* Audio
* [audioread](https://github.com/beetbox/audioread) - オーディオデコードクロスライブラリ（GStreamer + Core Audio + MAD + FFmpeg).
* [dejavu](https://github.com/worldveil/dejavu) - オーディオフィンガープリンティングと認識.
* [mingus](http://bspaans.github.io/python-mingus/) - MIDI ファイルと再生をサポートする高度な音楽理論と表記パッケージ.
* [pyAudioAnalysis](https://github.com/tyiannak/pyAudioAnalysis) - 音声特徴抽出、分類、セグメンテーションおよびその応用
* [pydub](https://github.com/jiaaro/pydub) - シンプルで簡単な高レベルのインターフェイスでオーディオを操作.
* [TimeSide](https://github.com/Parisson/TimeSide) - オープンな Web オーディオ処理フレームワーク.
* [beets](http://beets.io/) - 音楽ライブラリマネージャーと [MusicBrainz](https://musicbrainz.org/) タガー.
* [eyeD3](http://eyed3.nicfit.net/) - オーディオファイル, 特に ID3 メタデータを含む MP3 ファイルを扱うツール.
* [mutagen](https://github.com/quodlibet/mutagen) - オーディオメタデータを扱う Python モジュール.
* [tinytag](https://github.com/devsnd/tinytag) - MP3, OGG, FLAC, Wave ファイルの音楽メタデータを読み込むためのライブラリ.



## 認証

*認証スキームを実装するためのライブラリ*

### OAuth

* [authlib](https://github.com/lepture/authlib) - JavaScript Object Signing and Encryption ドラフト実装.
* [django-allauth](https://github.com/pennersr/django-allauth) - Django 用の認証アプリケーションは「うまく動作します.」
* [django-oauth-toolkit](https://github.com/evonove/django-oauth-toolkit) - Django のための OAuth.
* [oauthlib](https://github.com/idan/oauthlib) - OAuth リクエスト署名ロジックの一般的で徹底した実装.
* [python-oauth2](https://github.com/joestump/python-oauth2) - OAuth クライアントとサーバーを作成するための, 完全にテストされた抽象的なインターフェイス.
* [python-social-auth](https://github.com/omab/python-social-auth) - 簡単に設定できるソーシャル認証の仕組み.

### JWT

* [pyjwt](https://github.com/jpadilla/pyjwt) - JSON Web Token の実装.
* [python-jose](https://github.com/mpdavis/python-jose/) - Python での JOSE の実装.
* [python-jwt](https://github.com/davedoesdev/python-jwt) - JSON Web トークンの生成と検証のためのモジュール.


## ビルドツール

*ソースコードからソフトウェアをコンパイルする*

* [dataclasses](https://docs.python.org/3/library/dataclasses.html) - データクラス (Python 標準ライブラリ).
* [BitBake](http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html) - 組み込み Linux のための `make` ライクなビルドツール.
* [buildout](http://www.buildout.org/en/latest/) - 複数の部分からアプリケーションを作成, 組み立て, 展開するためのビルドシステム.
* [PlatformIO](https://github.com/platformio/platformio-core) - さまざまな開発プラットフォームでコードを構築するコンソールツール.
* [pybuilder](https://github.com/pybuilder/pybuilder) - 純粋な Python で書かれた連続ビルドツール.
* [SCons](http://www.scons.org/) - ソフトウェア構築ツール.


## 組み込みクラスの強化

*Python 組み込みクラスを強化するライブラリ.*

* [attrs](https://github.com/python-attrs/attrs) - `__init__`, `__eq__`, `__repr__`, などの置き換え. クラス定義にボイラープレートを追加する.
* [bidict](https://github.com/jab/bidict) - 効率的な　Python　の双方向地図データ構造と関連機能.
* [Box](https://github.com/cdgriffith/Box) - 高度なドット表記法による　Python　ディクショナリ.
* [DottedDict](https://github.com/carlosescri/DottedDict) - リストとディクテーションに点線のパス表記でアクセスする方法を提供するライブラリ.


## キャッシング

*データをキャッシュするためのライブラリ*

* [Beaker](https://github.com/bbangert/beaker) - セッションとキャッシング用の WSGI ミドルウェア.
* [django-cache-machine](https://github.com/django-cache-machine/django-cache-machine) - Django モデルの自動キャッシングと無効化.
* [django-cacheops](https://github.com/Suor/django-cacheops) - 自動細分化されたイベント駆動型無効化を備えた滑らかな ORM キャッシュ.
* [dogpile.cache](http://dogpilecache.readthedocs.io/en/latest/) - dogpile.cache は, 同じ著者による Beaker の次世代代替品です.
* [HermesCache](https://pypi.org/project/HermesCache/) - タグベースの無効化と dogpile 効果防止を備えた Python キャッシングライブラリ.
* [pylibmc](https://github.com/lericson/pylibmc) - [libmemcached](http://libmemcached.org/libMemcached.html) インタフェースの Python ラッパーです.
* [python-diskcache](http://www.grantjenks.com/docs/diskcache/) - SQLite とファイルバックアップキャッシュバックエンドは, Memcached や Redis より高速なルックアップを提供します.


## ChatOps ツール

*チャットボット開発のためのライブラリ*

* [Errbot](https://github.com/errbotio/errbot/) - ChatOps を実装する最も簡単で人気のあるチャットボット.


## CMS

*コンテンツ管理システム（Content Management Systems）*

* [wagtail](https://wagtail.io/) - Django のコンテンツマネジメントシステム.
* [django-cms](https://www.django-cms.org/en/) - オープンソースエンタープライズ CMS は, Django に基づいています.
* [feincms](https://github.com/feincms/feincms) - Django 上に構築された最先端のコンテンツ管理システムのひとつ.
* [Kotti](https://github.com/Kotti/Kotti) - Pyramid 上に構築された高レベルの Pythonic Web アプリケーションフレームワーク.
* [mezzanine](https://github.com/stephenmcd/mezzanine) - 強力で一貫性のある, 柔軟なコンテンツ管理プラットフォーム.
* [plone](https://plone.org/) - オープンソースアプリケーションサーバー Zope の上に構築された CMS.
* [quokka](https://github.com/rochacbruno/quokka) - Flask と MongoDB による柔軟で拡張性のある小さな CMS.



## コード解析

*静的解析ツール, リンター, コード品質チェッカー. [awesome-static-analysis](https://github.com/mre/awesome-static-analysis) も参照してください.*

### コード解析

* [coala](https://github.com/coala/coala/) - 言語に依存せず容易に拡張可能なコード解析アプリケーション.
* [code2flow](https://github.com/scottrogowski/code2flow) - Python と JavaScript コードを DOT フローチャートに変換する.
* [prospector](https://github.com/PyCQA/prospector) - Python コード解析ツール.
* [pycallgraph](https://github.com/gak/pycallgraph) - Python アプリケーションのフロー（コールグラフ）を視覚化するライブラリ.

### コードリンタ

* [flake8](https://pypi.org/project/flake8/) - モジュラーソースコードチェッカー：pep8, pyflakes 及び McCabe.
    * [awesome-flake8-extensions](https://github.com/DmytroLitvinov/awesome-flake8-extensions)
* [Pylint](https://www.pylint.org/) - 完全にカスタマイズ可能なソースコードアナライザ.
* [pylama](https://github.com/klen/pylama) - Python と JavaScript 用のコード監査ツール.
* [wemake-python-styleguide](https://github.com/wemake-services/wemake-python-styleguide) - これまでで最も厳格で考えられた Python リンター.
* [black](https://github.com/python/black) - 妥協のない Python コードフォーマッタ.
* [yapf](https://github.com/google/yapf) - Google によるさらに別のPythonコードフォーマッタ.

### 静的型チェック

*[awesome-python-typing](https://github.com/typeddjango/awesome-python-typing) も参照してください.*

* [mypy](http://mypy-lang.org/) - コンパイル時に変数の型をチェックする.
* [pyre-check](https://github.com/facebook/pyre-check) - 実行型チェック.

### 静的型注釈ジェネレータ

* [MonkeyType](https://github.com/Instagram/MonkeyType) - ランタイム型を収集して静的型アノテーションを生成する, Python 用のシステム.


## コマンドラインインターフェース開発

*コマンドラインアプリケーションを構築するためのライブラリ*

### コマンドラインアプリケーション開発

* [cement](http://builtoncement.com/) - Python の CLI アプリケーションフレームワーク.
* [click](http://click.pocoo.org/dev/) - 合成可能な方法で美しいコマンドラインインターフェイスを作成するためのパッケージ.
* [cliff](https://docs.openstack.org/developer/cliff/) - マルチレベルのコマンドでコマンドラインプログラムを作成するためのフレームワーク.
* [clint](https://github.com/kennethreitz/clint) - Python コマンドラインアプリケーションツール.
* [docopt](http://docopt.org/) - Python のコマンドライン引数パーサー.
* [python-fire](https://github.com/google/python-fire) - Python オブジェクトからコマンドラインインターフェイスを作成するためのライブラリ. Google 製.
* [python-prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit) - 強力でインタラクティブなコマンドラインを構築するためのライブラリ.

### ターミナルレンダリング

* [asciimatics](https://github.com/peterbrittain/asciimatics) - フルスクリーンのテキスト UI （インタラクティブフォームから ASCII アニメーションまで） を作成するためのパッケージ.
* [bashplotlib](https://github.com/glamp/bashplotlib) - ターミナルで基本的なプロットを作成できる.
* [colorama](https://pypi.org/project/colorama/) - プラットフォーム間で色分けされたターミナルテキスト.
* [tqdm](https://github.com/tqdm/tqdm) - CLI のための高速で拡張可能なプログレスバー.

## コマンドラインツールズ

*生産性向上のための CLI ベースのツール.*

### 生産性向上ツール

* [cookiecutter](https://github.com/audreyr/cookiecutter) - cookiecutters（プロジェクトテンプレート）からプロジェクトを作成するコマンドラインユーティリティ.
* [doitlive](https://github.com/sloria/doitlive) - 端末のライブプレゼンテーションのためのツール.
* [howdoi](https://github.com/gleitz/howdoi) - コマンドラインから行うインスタント・コーディング.
* [malbox](https://github.com/GoSecure/malboxes) - VirtualBox と Vagrant を利用し, マルウェアを分析する仮想マシンを作成します.
* [PathPicker](https://github.com/facebook/PathPicker) - bash 出力からファイルを選択します.
* [percol](https://github.com/mooz/percol) - UNIX 上の伝統的なパイプの概念にインタラクティブな選択肢を追加します.
* [thefuck](https://github.com/nvbn/thefuck) - 前のコンソールコマンドを修正する.
* [tmuxp](https://github.com/tony/tmuxp) - [tmux](https://github.com/tmux/tmux) セッションマネージャ.
* [try](https://github.com/timofurrer/try) - Python パッケージを試すためのシンプルな CLI - これ以上に簡単のものはありません.

### CLI 機能強化

* [httpie](https://github.com/jakubroztocil/httpie) - コマンドライン HTTP クライアント, 使いやすい cURL の置き換え.
* [kube-shell](https://github.com/cloudnativelabs/kube-shell) - Kubernetes CLI を操作するための統合シェル.
* [mycli](https://github.com/dbcli/mycli) - オートコンプリートとシンタックスハイライト付きの MySQL 用ターミナルクライアント.
* [pgcli](https://github.com/dbcli/pgcli) - オートコンプリートとシンタックス表示付きの Postgres CLI.
* [saws](https://github.com/donnemartin/saws) - スーパーチャージ AWS CLI.


## 互換性

*Python 2 から Python 3 への移行用ライブラリ*

* [python-future](http://python-future.org/index.html) - Python 2 と Python 3 間の不足を補う互換レイヤー.
* [python-modernize](https://github.com/mitsuhiko/python-modernize) - Python 3 移行のために Python コードを現代化します.
* [six](https://pypi.org/project/six/) - Python 2 と 3 の互換性ユーティリティ.


## コンピュータビジョン

*コンピュータビジョンのためのライブラリ*

* [OpenCV](http://opencv.org/) - オープンソースコンピュータビジョンライブラリ.
* [pytesseract](https://github.com/madmaze/pytesseract) - [Google Tesseract OCR](https://github.com/tesseract-ocr) の別ラッパー.
* [SimpleCV](http://simplecv.org/) - コンピュータビジョンアプリケーションを構築するためのオープンソースフレームワーク.


## 並行性及び並列性

*並行および並列実行のためのライブラリ. [awesome-asyncio](https://github.com/timofurrer/awesome-asyncio) も参照してください.*

* [concurrent.futures](https://docs.python.org/3/library/concurrent.futures.html) - プロセスベースの 「[threading](https://docs.python.org/3/library/threading.html)」 インターフェース.
* [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) - プロセスベースの並列化 (Python 標準ライブラリ).
* [eventlet](http://eventlet.net/) - WSGI をサポートする非同期フレームワーク.
* [gevent](http://www.gevent.org/) - [greenlet](https://github.com/python-greenlet/greenlet) を使用するコルーチンベースのPython ネットワーキングライブラリ.
* [uvloop](https://github.com/MagicStack/uvloop) - libuv 上での asyncio イベントループの超高速実装.
* [scoop](https://github.com/soravux/scoop) - Python でのスケーラブルな並行操作.


## コンフィギュレーション

*構成オプションを格納および解析するためのライブラリ*

* [configobj](https://github.com/DiffSK/configobj) - バリデーション付き INI ファイルパーサー.
* [configparser](https://docs.python.org/3/library/configparser.html) - INI ファイルパーサー (Python 標準ライブラリ).
* [profig](http://profig.readthedocs.org/en/default/) - 値の変換を伴う複数のフォーマットからの構成.
* [python-decouple](https://github.com/henriquebastos/python-decouple) - コードから設定を厳密に分離します.


## 暗号化

*暗号化手法*

* [cryptography](https://cryptography.io/en/latest/) - 暗号プリミティブとレシピを Python 開発者に公開するように設計されたパッケージ.
* [paramiko](https://github.com/paramiko/paramiko) - ネイティブ Python SSHv2 プロトコルライブラリ.
* [passlib](https://pythonhosted.org/passlib/) - 非常に高レベルで安全なパスワードストレージ/ハッシュライブラリ.
* [pynacl](https://github.com/pyca/pynacl) - Networking 及び Cryptography（NaCl）ライブラリの Python バインディング.


## データ分析

*データ分析用ライブラリ*

* [Blaze](https://github.com/blaze/blaze) - Big Data のための NumPy と Pandas のインターフェースです.
* [Open Mining](https://github.com/mining/mining) - Pandas インターフェイスのビジネスインテリジェンス（BI）.
* [Orange](https://orange.biolab.si/) - ビジュアルプログラミングやスクリプトによるデータマイニング, データの視覚化, 解析, 機械学習.
* [Pandas](http://pandas.pydata.org/) - 高性能で使いやすいデータ構造とデータ解析ツールを提供するライブラリ.
* [Optimus](https://github.com/ironmussa/Optimus) - PySpark を使用するとで, アジャイルデータサイエンスワークフローが簡単になります.


## データ検証

*データを検証するためのライブラリ*
*多くの場合, フォームに使用されます*

* [Cerberus](https://github.com/pyeve/cerberus) - 軽量で拡張可能なデータ検証ライブラリ.
* [colander](https://docs.pylonsproject.org/projects/colander/en/latest/) - HTML フォームのポストで取得した, XML 及び JSON データの検証とデシリアライズ.
* [evilpass](https://github.com/SirCmpwn/evilpass) - 一行で入力されたパスワードの強さを検証できます.
* [jsonschema](https://github.com/Julian/jsonschema) - [JSON Schema](http://json-schema.org/) の Python での実装.
* [schema](https://github.com/keleshev/schema) - Python データ構造を検証するためのライブラリ.
* [Schematics](https://github.com/schematics/schematics) - データ構造の検証.
* [valideer](https://github.com/podio/valideer) - 軽量で拡張可能なデータ検証およびアダプテーションライブラリ.
* [voluptuous](https://github.com/alecthomas/voluptuous) - Python データ検証ライブラリ.


## データの視覚化

*データを視覚化するためのライブラリ*
*[Awesome JavaScript](http://qiita.com/h_nt21/items/5bf899bfe8f5d86d2096) も参照してください*

* [Altair](https://github.com/altair-viz/altair) - Python のための宣言的な統計的可視化ライブラリ.
* [Bokeh](https://github.com/bokeh/bokeh) - Python のための対話型 Web プロット.
* [bqplot](https://github.com/bloomberg/bqplot) - Jupyter Notebook 用対話型プロットライブラリ.
* [Dash](https://plot.ly/products/dash/) - Flask, React, Plotly で構築された, Web アプリケーション分析を目的としています.
    * [awesome-dash](https://github.com/Acrotrend/awesome-dash)
* [plotnine](https://github.com/has2k1/plotnine) - ggplot2 に基づく Python のグラフィックス.
* [Matplotlib](http://matplotlib.org/) - Python 2 Dプロットライブラリ.
* [Pygal](http://www.pygal.org/en/latest/) - Python SVG チャートクリエーター.
* [PyGraphviz](https://pypi.org/project/pygraphviz/) - [Graphviz](http://www.graphviz.org/) の Python インタフェース.
* [PyQtGraph](http://www.pyqtgraph.org/) - インタラクティブでリアルタイムな 2D/3D/Image プロット, 科学・工学ウィジェット.
* [Seaborn](https://github.com/mwaskom/seaborn) - Matplotlib を使用した統計データの視覚化.
* [Superset](https://github.com/airbnb/superset) - Airbnb が提供する, 視覚的で直感的でインタラクティブなデータ検索プラットフォーム.
* [VisPy](https://github.com/vispy/vispy) - OpenGL に基づく高性能な科学的視覚化.


## データベース

*Pythonで実装されたデータベース*

* [pickleDB](https://github.com/patx/pickledb) - Python用のシンプルで軽量な key-value ストア.
* [tinydb](https://github.com/msiemens/tinydb) - 小さな, ドキュメント指向のデータベース.
* [ZODB](https://github.com/zopefoundation/ZODB) - Python のネイティブオブジェクトデータベース. key-value およびオブジェクトグラフデータベース.


## データベースドライバ

*データベースの接続と操作のためのライブラリ*

### MySQL

*[Awesome MySQL](http://shlomi-noach.github.io/awesome-mysql/) も参照してください.*

* [mysqlclient](https://github.com/PyMySQL/mysqlclient-python) - Python 3 をサポートする MySQL コネクタ([mysql-python](https://sourceforge.net/projects/mysql-python/) のフォーク).
* [PyMySQL](https://github.com/PyMySQL/PyMySQL) - mysql-python との互換性がある, 純粋なPython MySQL ドライバ.

### PostgreSQL

*[awesome-postgres](https://github.com/dhamaniasad/awesome-postgres) も参照してください.*
 
* [psycopg2](http://initd.org/psycopg/) - 最も一般的な Python 用 PostgreSQL アダプタ.
* [queries](https://github.com/gmr/queries) - PostgreSQL と対話するための psycopg2 ライブラリのラッパー.

### その他のリレーショナルデータベース

* [pymssql](http://www.pymssql.org/en/latest/) - Microsoft SQL Server へのシンプルなデータベースインターフェイス.

### NoSQL データベース

* [cassandra-python-driver](https://github.com/datastax/python-driver) - Cassandra のための Python ドライバ.
* [happybase](https://github.com/wbolster/happybase) - Apache HBase の開発者向けのライブラリ.
* [Plyvel](https://github.com/wbolster/plyvel) - LevelDB への高速で機能豊富な Python インターフェイス.
* [py2neo](https://py2neo.org/2.0/) - Neo4j の快適なインターフェースのための Python ラッパークライアント.
* [pycassa](https://github.com/pycassa/pycassa) - Cassandra の Python Thrift ドライバ.
* [pymongo](https://github.com/mongodb/mongo-python-driver) - MongoDB の公式 Python クライアント.
* [redis-py](https://github.com/andymccurdy/redis-py) - Redis の Python クライアント.
* [telephus](https://github.com/driftx/Telephus) - Cassandra のための Twisted ベースのクライアント.
* [txRedis](https://github.com/deldotdr/txRedis) - Redis のための Twisted ベースのクライアント.

### 非同期クライアント

* [motor](https://github.com/mongodb/motor) - MongoDB の非同期ドライバ.
* [Telephus](https://github.com/driftx/Telephus) - Twisted ベースの Cassandra クライアント.
* [txpostgres](https://github.com/wulczer/txpostgres) - PostgreSQL のための Twisted ベースの非同期ドライバ.
* [txRedis](https://github.com/deldotdr/txRedis) - Twisted ベースの Redis クライアント.


## 日時

*日時を扱うライブラリ*

* [Chronyk](https://github.com/KoffeinFlummi/Chronyk) - 人間が書いた時間と日付を解析するための Python 3 ライブラリ.
* [dateutil](https://github.com/dateutil/dateutil) - 標準の Python [datetime](https://docs.python.org/3/library/datetime.html) モジュールの拡張.
* [delorean](https://github.com/myusuf3/delorean/) - datetimes を扱う場合の不都合な真実を取り除くためのライブラリ.
* [moment](https://github.com/zachwill/moment) - 日付/時刻を扱うための Python ライブラリ. [Moment.js](http://momentjs.com/) に触発されました.
* [Pendulum](https://github.com/sdispater/pendulum) - Python の datetimes をより簡単に扱える.
* [PyTime](https://github.com/shinux/PyTime) - 文字列で日時/日時を操作することを目的とした使いやすい Python モジュールです.
* [pytz](https://launchpad.net/pytz) - モダンで歴史的なタイムゾーン定義. [tz database](https://en.wikipedia.org/wiki/Tz_database) を Python に持ち込みます.
* [when.py](https://github.com/dirn/When.py) - 一般的な日時アクションを実行するのに役立つユーザーフレンドリーな機能を提供する.
* [maya](https://github.com/kennethreitz/maya) - 人間のための Datetimes.


## デバッグツール

*コードをデバッグするためのライブラリ*

### pdb-like デバッガ

* [ipdb](https://pypi.python.org/pypi/ipdb) - IPython 対応の [pdb](https://docs.python.org/3/library/pdb.html).
* [pdb++](https://pypi.python.org/pypi/pdbpp/) - pdb の別選択肢.
* [pudb](https://pypi.python.org/pypi/pudb) - コンソールベースのフルスクリーン Python デバッガ.
* [wdb](https://github.com/Kozea/wdb) - WebSocket を介した, ありそうでなかった Web デバッガ.

### トレーシング

* [lptrace](https://github.com/khamidou/lptrace) - Python プログラムのための [strace](http://man7.org/linux/man-pages/man1/strace.1.html).
* [manhole](https://github.com/ionelmc/python-manhole) - Unix ソケット接続を受け入れ, すべてのスレッドと対話式プロンプトに対してスタックトレースを提示するデバッギング.
* [pyringe](https://github.com/google/pyringe) - デバッガは, Python プロセスに接続してコードを注入することができます.
* [python-hunter](https://github.com/ionelmc/python-hunter) - Hunter は柔軟なコードトレースツールキットです.

### プロファイラ

* [line_profiler](https://github.com/rkern/line_profiler) - 行単位のプロファイリング.
* [memory_profiler](https://github.com/fabianp/memory_profiler) - Python コードのメモリ使用量を監視する.
* [profiling](https://github.com/what-studio/profiling) - インタラクティブな Python プロファイラ.
* [py-spy](https://github.com/benfred/py-spy) - Rust で書かれた, Python 用サンプリングプロファイラ.
* [pyflame](https://github.com/uber/pyflame) - ptracing プロファイラ.
* [vprof](https://github.com/nvdv/vprof) - ビジュアル Python プロファイラ.

### その他

* [icecream](https://github.com/gruns/icecream) - 単一の単純な関数呼び出しで, 変数, 式, およびプログラムの実行を検査します.
* [django-debug-toolbar](https://github.com/jazzband/django-debug-toolbar) - Django の各種デバッグ情報を表示する.
* [django-devserver](https://github.com/dcramer/django-devserver) - jango の runserver ドロップイン置換.
* [flask-debugtoolbar](https://github.com/mgood/flask-debugtoolbar) - django-debug-toolbar の flask への移植.
* [pyelftools](https://github.com/eliben/pyelftools) - ELF ファイルと DWARF デバッグ情報の解析と解析.


## 深層学習

*ニューラルネットワークとディープラーニングのためのフレームワーク*
*[Awesome Deep Learning](https://github.com/ChristosChristofidis/awesome-deep-learning) も参照してください*

* [Chainer](https://github.com/pfnet/chainer) - 日本製ディープラーニングフレームワーク.
* [caffe](https://github.com/BVLC/caffe) - ディープラーニングのための高速オープンソースフレームワーク.
* [keras](https://github.com/fchollet/keras) - 高レベルのニューラルネットワークライブラリで, TensorFlow または Theano のいずれかの上で動作することができます.
* [mxnet](https://github.com/dmlc/mxnet) - 軽量, ポータブル, 柔軟な分散型/モバイル型のディープ・ラーニング, また突然変異を意識したデータフロースケジューラ. Python, R, Julia, Scala, Go JavaScript 等の多くの言語に対応しています.
* [pytorch](http://pytorch.org/) - 強力な GPU アクセラレーションを備えた, numpy のようなテンソル計算とダイナミックニューラルネットワーク.
* [SerpentAI](https://github.com/SerpentAI/SerpentAI) - ゲームエージェントフレームワーク. どんなビデオゲームでも深い学習サンドボックスとして使用できます.
* [tensorflow](https://github.com/tensorflow/tensorflow) - Google が作成した最も人気のある Deep Learning フレームワーク.
* [Theano](https://github.com/Theano/Theano) - 高速数値計算用ライブラリ.


## DevOps ツール

*開発者向けのソフトウェアとライブラリ*

* [ansible](https://github.com/ansible/ansible) - 根本的にシンプルな IT 自動化プラットフォームです.
* [cloudinit](http://cloudinit.readthedocs.io/en/latest/) - クラウドインスタンスの早期初期化を処理するマルチディストリビューションパッケージ.
* [cuisine](https://github.com/sebastien/cuisine) - Fabric の Chef ライクな機能性.
* [docker-compose](https://docs.docker.com/compose/) - [Docker](https://www.docker.com/) を使用した高速で隔離された開発環境.
* [fabric](https://github.com/fabric/fabric) - リモート実行とデプロイのための単純な Pythonic ツール.
* [fabtools](https://github.com/fabtools/fabtools) - すばらしい Fabric ファイルを作成するためのツール.
* [honcho](https://github.com/nickstenning/honcho) - Procfile ベースのアプリケーションを管理するための [Foreman](https://github.com/ddollar/foreman) の Python クローン.
* [OpenStack](https://www.openstack.org/) - プライベートクラウドとパブリッククラウドを構築するためのオープンソースソフトウェア.
* [pexpect](https://github.com/pexpect/pexpect) - GNU expect のような擬似端末で対話型プログラムを制御する.
* [psutil](https://github.com/giampaolo/psutil) - クロスプラットフォームプロセスとシステムユーティリティモジュール.
* [saltstack](https://github.com/saltstack/salt) - インフラの自動化と管理システム.
* [supervisor](https://github.com/Supervisor/supervisor) - UNIX 用スーパーバイザプロセス制御システム.


## 分散コンピューティング

*分散コンピューティング用のフレームワーク及びライブラリ*

### バッチプロセシング

* [PySpark](https://pypi.org/project/pyspark/) - [Apache Spark](https://spark.apache.org/) Python API.
* [dask](https://dask.pydata.org/en/latest/) - 分析コンピューティング用の柔軟な並列コンピューティングライブラリ.
* [luigi](https://github.com/spotify/luigi) - バッチジョブの複雑なパイプラインを構築するのに役立つモジュール.
* [mrjob](https://github.com/Yelp/mrjob) - Hadoop または Amazon Web Services で MapReduce ジョブを実行します.
* [Ray](https://github.com/ray-project/ray/) - 機械学習エコシステムを統合する並列分散 Python のシステム.

### ストリームプロセシング

* [faust](https://github.com/robinhood/faust) - [Kafka Streams](https://kafka.apache.org/documentation/streams/) からのアイデアを Python に移植したストリーム処理ライブラリ.
* [streamparse](https://github.com/Parsely/streamparse) - リアルタイムのデータストリームに対して Python コードを実行します. [Apache Storm](http://storm.apache.org/) との統合です.

## ディストリビューション

*リリース配布用のパッケージ化された実行可能ファイルを作成するライブラリ*

* [cx_Freeze](https://anthony-tuininga.github.io/cx_Freeze/) - cx_Freeze は, クロスプラットフォームで動作する, Python スクリプトを実行可能ファイルに変換するライブラリ. Python 2.7 以上（Python 3 を含む）をサポートしています.
* [dh-virtualenv](https://github.com/spotify/dh-virtualenv) - virtualenv をビルドして Debian パッケージとして配布します.
* [Nuitka](http://nuitka.net/) - スクリプト, モジュール, パッケージを実行可能モジュールまたは拡張モジュールにコンパイルします.
* [py2app](http://pythonhosted.org/py2app/) - Python スクリプトを圧縮します (Mac OS X).
* [py2exe](http://www.py2exe.org/) - Python スクリプトを圧縮します (Windows).
* [PyInstaller](https://github.com/pyinstaller/pyinstaller) - Python プログラムをスタンドアロンの実行可能ファイル（クロスプラットフォーム）に変換します.
* [pynsist](http://pynsist.readthedocs.io/en/latest/) - Windows インストーラをビルドするツールで, インストーラは Python 自体をバンドルします.


## ドキュメント生成

*プロジェクト文書を生成するためのライブラリ*

* [sphinx](https://github.com/sphinx-doc/sphinx/) - Python ドキュメンテーションジェネレータ.
* [Awesome Sphinxdoc](https://github.com/yoloseem/awesome-sphinxdoc)
* [pdoc](https://github.com/BurntSushi/pdoc) -Python ライブラリの API ドキュメントを自動生成する Epydoc の置き換え.
* [Pycco](https://github.com/pycco-docs/pycco) - リテラルプログラミングスタイルのドキュメントジェネレータ.


## ダウンローダ

*ダウンロードのためのライブラリ*

* [s3cmd](https://github.com/s3tools/s3cmd) - Amazon S3 と CloudFront を管理するコマンドラインツール.
* [s4cmd](https://github.com/bloomreach/s4cmd) - Super S3 コマンドラインツール. 高性能です.
* [you-get](https://you-get.org/) - Python 3 で書かれた YouTube / Youku / Niconico ビデオダウンローダー.
* [youtube-dl](https://rg3.github.io/youtube-dl/) - YouTube からビデオをダウンロードするための小さなコマンドラインプログラムです.


## 電子商取引

*電子商取引と支払いのためのフレームワークとライブラリ*

* [alipay](https://github.com/lxneng/alipay) - Python 用非公式 Alipay API.
* [Cartridge](https://github.com/stephenmcd/cartridge) - Mezzanine を使用して構築されたショッピングカートアプリ.
* [django-oscar](http://oscarcommerce.com/) - Django 用のオープンソースの電子商取引フレームワーク.
* [django-shop](https://github.com/awesto/django-shop) - Django ベースのショップシステム.
* [merchant](https://github.com/agiliq/merchant) - 様々な支払い処理業者からの支払いを受け入れる Django アプリ.
* [money](https://github.com/carlospalol/money) - オプションで CLDR 対応のロケール対応フォーマットと, 拡張可能な通貨交換ソリューションを備えた `Money` クラス.
* [python-currencies](https://github.com/Alir3z4/python-currencies) - 貨幣フォーマットとそのフォーマット前の通貨を表示します.
* [forex-python](https://github.com/MicroPyramid/forex-python) - 為替レート, Bitcoin価格指数, 通貨換算.
* [saleor](http://getsaleor.com/) - Django の電子商取引の店舗を作成できます.
* [shoop](https://www.shuup.io/en/) - Django ベースのオープンソース電子商取引プラットフォーム.


## エディタプラグインと統合開発環境

### Emacs

* [elpy](https://github.com/jorgenschaefer/elpy) - Emacs の Python 開発環境.

### Sublime Text

* [anaconda](https://github.com/DamnWidget/anaconda) - Anaconda は Sublime Text 3 をフル機能の Python 開発 IDE に変えます.
* [SublimeJEDI](https://github.com/srusskih/SublimeJEDI) - すばらしい自動補完ライブラリである Jedi の Sublime Text プラグイン.

### Vim

* [jedi-vim](https://github.com/davidhalter/jedi-vim) - すばらしい自動補完ライブラリである Jedi の Vim バインディング.
* [python-mode](https://github.com/python-mode/python-mode) - Vim を Python IDE にするためのプラグインをひとつにまとめました.
* [YouCompleteMe](https://github.com/Valloric/YouCompleteMe) - Python のための [Jedi](https://github.com/davidhalter/jedi) ベース補完エンジンを含みます.

### Visual Studio

* [PTVS](https://github.com/Microsoft/PTVS) - Visual Studio のための Python ツール.

### Visual Studio Code

* [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) - 豊富な Python サポートを有する公式 VSCode 拡張機能.

### IDE

* [PyCharm](https://www.jetbrains.com/pycharm/) - JetBrains による商用 Python IDE. 無料コミュニティ版も存在します.
* [spyder](https://github.com/spyder-ide/spyder) - オープンソース Python IDE.


## Email

*電子メールを送信および解析するためのライブラリ*

* [envelopes](http://tomekwojcik.github.io/envelopes/) - 人間のためのメーリング.
* [flanker](https://github.com/mailgun/flanker) - 電子メールアドレスと Mime 解析ライブラリ.
* [imbox](https://github.com/martinrusev/imbox) - 人間のための Python IMAP.
* [inbox.py](https://github.com/kennethreitz/inbox.py) - 人間のための Python SMTP サーバ.
* [lamson](https://github.com/zedshaw/lamson) - Python の SMTP アプリケーションサーバ.
* [Marrow Mailer](https://github.com/marrow/mailer) - 高性能で拡張可能なメール配信フレームワーク.
* [modoboa](https://github.com/modoboa/modoboa) - 近代的で簡素化された Web UI を含むメールホスティングおよび管理プラットフォーム.
* [Nylas Sync Engine](https://github.com/nylas/sync-engine) - 強力な電子メール同期プラットフォームの上に RESTful API を提供します.
* [yagmail](https://github.com/kootenpv/yagmail) - Gmail/SMTP クライアント.


## 環境管理

*Python のバージョン管理と仮想環境管理のためのライブラリ*

* [pyenv](https://github.com/pyenv/pyenv) - 単純な Python のバージョン管理.
* [Pipenv](https://github.com/kennethreitz/pipenv) - pipfile, pip, そして virtualenv が一つに合わさったようなものです.
* [poetry](https://github.com/sdispater/poetry) - Python の依存関係管理とパッケージ化が簡単になりました.
* [virtualenv](https://pypi.python.org/pypi/virtualenv) - 分離された Python 環境を作成するためのツール.


## ファイル

*ファイル操作と MIME タイプ検出のためのライブラリ*

* [mimetypes](https://docs.python.org/3/library/mimetypes.html) - ファイル名を MIME タイプにマップします (Python 標準ライブラリ).
* [path.py](https://github.com/jaraco/path.py) - [os.path](https://docs.python.org/3/library/os.path.html) のモジュールラッパーです.
* [pathlib](https://docs.python.org/3/library/pathlib.html) - クロスプラットフォームのオブジェクト指向 path ライブラリです (Python 3.4 以降の Python 標準ライブラリ).
* [PyFilesystem2](https://github.com/pyfilesystem/pyfilesystem2) - Python のファイルシステム抽象化レイヤー.
* [python-magic](https://github.com/ahupp/python-magic) - libmagic ファイルタイプ識別ライブラリへの Python インタフェース.
* [Unipath](https://github.com/mikeorr/Unipath) - ファイル/ディレクトリ操作に対するオブジェクト指向のアプローチ.
* [watchdog](https://github.com/gorakhargosh/watchdog) - ファイルシステムイベントを監視するための API およびシェルユーティリティ.


## 外部機能インターフェース

*外部機能インタフェースを提供するためのライブラリ*

* [cffi](https://pypi.org/project/cffi/) - Python で C 言語を呼び出すための外部関数インタフェース.
* [ctypes](https://docs.python.org/3/library/ctypes.html) - Python で C 言語を呼び出すための外部関数インタフェース (Python 標準ライブラリ).
* [PyCUDA](https://mathema.tician.de/software/pycuda/) - Nvidia の CUDA API 用の Python ラッパーです.
* [SWIG](http://www.swig.org/Doc1.3/Python.html) - 簡易ラッパーとインターフェースジェネレーター.


## フォーム

*フォームを扱うためのライブラリ*

* [Deform](https://github.com/Pylons/deform) - formish フォーム生成ライブラリの影響を受ける Python HTML フォーム生成ライブラリ.
* [django-bootstrap3](https://github.com/dyve/django-bootstrap3) - Bootstrap 3 と Django との統合.
* [django-bootstrap4](https://github.com/zostera/django-bootstrap4) - Bootstrap 4 と Django との統合.
* [django-crispy-forms](https://github.com/django-crispy-forms/django-crispy-forms) - 非常にエレガントで, DRY で, 美しいフォームを作成できる Django アプリケーションです.
* [django-remote-forms](https://github.com/WiserTogether/django-remote-forms) - プラットフォームに依存しない Django フォームシリアライザ.
* [WTForms](https://github.com/wtforms/wtforms) - 柔軟なフォーム検証とレンダリングライブラリ.


## 関数プログラミング

*Python で関数プログラミング*

* [Coconut](http://coconut-lang.org/) - Coconut は, シンプル, エレガント, Pythonic な関数プログラミングのために作られた Python の拡張です.
* [CyToolz](https://github.com/pytoolz/cytoolz/) - Cython での Toolz 実装：高性能機能ユーティリティ.
* [fn.py](https://github.com/kachayev/fn.py) - Python での関数型プログラミング：関数型プログラミングを楽しむ上で欠けている機能の実装.
* [funcy](https://github.com/Suor/funcy) - ファンシーで実用的な機能ツール.
* [Toolz](https://github.com/pytoolz/toolz) - イテレータ, 関数, 辞書のための機能的なユーティリティの集まり.


## GUI 開発

*グラフィカルユーザーインターフェイスアプリケーションを扱うためのライブラリ*

* [curses](https://docs.python.org/3/library/curses.html#module-curses) - ターミナル GUI アプリケーションの作成に使用される [ncurses](http://www.gnu.org/software/ncurses/) 用の組み込みラッパー.
* [Eel](https://github.com/ChrisKnott/Eel) - Python の機能とライブラリへの完全なアクセスを持つ, Electron のようなオフライン HTML/JS GUI アプリケーションを作成するための小さなライブラリ.
* [enaml](https://github.com/nucleic/enaml) - QML のような宣言的構文を使って美しいユーザーインターフェイスを作成する.
* [Flexx](https://github.com/zoofIO/flexx) - Flexx は, GUI を作成するための純粋な Python ツールキットで, Web 技術をレンダリングに使用します.
* [Gooey](https://github.com/chriskiehl/Gooey) - コマンドラインプログラムを 1 行で完全な GUI アプリケーションに変える.
* [kivy](https://kivy.org/) - Windows, Linux, Mac OS X, Android, および iOS で動作する NUI アプリケーションを作成するためのライブラリ.
* [pyglet](https://bitbucket.org/pyglet/pyglet/wiki/Home) - Python 用のクロスプラットフォームのウィンドウとマルチメディアライブラリ.
* [PyGObject](https://wiki.gnome.org/Projects/PyGObject) - GLib / GObject / GIO / GTK +（GTK + 3）用の Python バインディング.
* [PyQt](https://riverbankcomputing.com/software/pyqt/intro) - [Qt](https://www.qt.io/) クロスプラットフォームアプリケーションと UI フレームワーク.
* [PySimpleGUI](https://github.com/PySimpleGUI/PySimpleGUI) - tkinter, Qt, WxPython, および Remi のラッパー.
* [pywebview](https://github.com/r0x0r/pywebview/) - webview コンポーネントを中心とした軽量なクロスプラットフォームネイティブラッパー.
* [Tkinter](https://wiki.python.org/moin/TkInter) - Tkinter は, Python のデファクトスタンダードの GUI パッケージです.
* [tkui](https://github.com/asrp/tkui) - GUI のライブ編集を行うことができる GUI メーカ.
* [Toga](https://github.com/pybee/toga) - Python ネイティブ, OS ネイティブ GUI ツールキット.
* [urwid](http://urwid.org/) - ウィジェット, イベント, 豊富な色などを強力にサポートするターミナル GUI アプリケーションを作成するためのライブラリ.
* [wxPython](https://wxpython.org/) - wxWidgets C++ クラスライブラリと Python のブレンド.


## ゲーム開発

*素晴らしいゲーム開発ライブラリ*

* [Cocos2d](http://cocos2d.org/) - cocos2d は, 2D ゲーム, デモ, その他のグラフィカル/インタラクティブアプリケーションを構築するためのフレームワークです.
* [Harfang3D](http://www.harfang3d.com) - 3D, VR, ゲーム開発のためのPythonフレームワーク.
* [Panda3D](https://www.panda3d.org/) - ディズニーが開発し, Carnegie Mellon's Entertainment Technology Center が管理する 3D ゲームエンジン.
* [Pygame](http://www.pygame.org/news.html) - Pygame は, ゲームを書くために設計された一連の Python モジュールです.
* [PyOgre](http://www.ogre3d.org/tikiwiki/PyOgre) - Ogre 3D レンダリングエンジン用の Python バインディングは, ゲーム, シミュレーション, その他 3D 用に使用できます.
* [PyOpenGL](http://pyopengl.sourceforge.net/) - OpenGL の Python ctypes バインディングとそれに関連する API です.
* [PySDL2](https://pysdl2.readthedocs.io) - SDL2 ライブラリ用の ctypes ベースのラッパー.
* [RenPy](https://www.renpy.org/) - ビジュアルノベルエンジン.


## 位置情報

*アドレスをジオコーディングし, 緯度と経度を扱うためのライブラリ*

* [django-countries](https://github.com/SmileyChris/django-countries) - モデルとフォームのための国のフィールドを提供する Django アプリ.
* [GeoDjango](https://docs.djangoproject.com/en/dev/ref/contrib/gis/) - 世界クラスの地理的 Web フレームワーク.
* [GeoIP](https://github.com/maxmind/geoip-api-python) - MaxMind GeoIP レガシーデータベース用の Python API.
* [geojson](https://github.com/frewsxcv/python-geojson) - GeoJSON 用の Python バインディングとユーティリティ.
* [geopy](https://github.com/geopy/geopy) - Python ジオコーディングツールボックス.
* [pygeoip](https://github.com/appliedsec/pygeoip) - 純粋な Python GeoIP API.


## HTML 操作

*HTML と XML を扱うためのライブラリ*

* [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) - HTML や XML を繰り返し検索し, 変更するための Python イディオムを提供します.
* [bleach](https://github.com/mozilla/bleach) - ホワイトリストベースの HTML サニタイズとテキストリンクライブラリ.
* [cssutils](https://pypi.org/project/cssutils/) - Python 用 CSS ライブラリ.
* [html5lib](https://github.com/html5lib/html5lib-python) - HTML ドキュメントとフラグメントを解析してシリアライズするための標準準拠のライブラリです.
* [lxml](http://lxml.de/) - HTML と XML を処理するための非常に高速で, 使いやすく多様なライブラリです.
* [MarkupSafe](https://github.com/pallets/markupsafe) - Python の XML / HTML / XHTML マークアップセーフティストリングを実装します.
* [pyquery](https://github.com/gawel/pyquery) - TML を解析するための jQuery ライクなライブラリです.
* [untangle](https://github.com/stchris/untangle) - XML 文書を Python オブジェクトに変換して簡単にアクセスできます.
* [WeasyPrint](http://weasyprint.org) - HTML と CSS 用のビジュアルレンダリングエンジンで, PDF に書き出すことができます.
* [xmldataset](https://xmldataset.readthedocs.io/en/latest/) - 単純な XML 解析.
* [xmltodict](https://github.com/martinblech/xmltodict) - JSON を使って作業しているように XML を使って作業できます.


## HTTP クライアント

*HTTP を扱うためのライブラリ*

* [grequests](https://github.com/kennethreitz/grequests) - 非同期 HTTP リクエストのための request + gevent.
* [httplib2](https://github.com/httplib2/httplib2) - 包括的な HTTP クライアントライブラリ.
* [requests](https://requests.kennethreitz.org/en/master/) - Humans™ に対する HTTP リクエスト.
* [treq](https://github.com/twisted/treq) - Twisted の HTTP クライアントの上に構築された API のような Python リクエスト.
* [urllib3](https://github.com/shazow/urllib3) - スレッドセーフな接続プーリング, ファイルポストサポート, 親しみやすい HTTP ライブラリ.


## ハードウェア

*ハードウェアプログラミングのためのライブラリ*

* [ino](http://inotool.org/) - [Arduino](https://www.arduino.cc/) を扱うコマンドラインツールキットです.
* [keyboard](https://github.com/boppreh/keyboard) - Windows と Linux でグローバルキーボードイベントをフックしてシミュレートします.
* [mouse](https://github.com/boppreh/mouse) - Windows と Linux 上でグローバルなマウスイベントをフックしてシミュレートします.
* [Pingo](http://www.pingo.io/) - Pingo は, Raspberry Pi, pcDuino, Intel Galileo などのデバイスをプログラムするための統一された API を提供します.
* [Pyro](http://pyrorobotics.com/) - Python Robotics.
* [PyUserInput](https://github.com/SavinaRoja/PyUserInput) - マウスとキーボードをクロスプラットフォームで制御するためのモジュール.
* [scapy](https://github.com/secdev/scapy) - 華麗なパケット操作ライブラリ.
* [wifi](https://github.com/rockymeza/wifi) - Linux 上で WiFi を操作するための Python ライブラリとコマンドラインツール.


## 画像操作

*イメージを操作するためのライブラリ*

* [hmap](https://github.com/rossgoodwin/hmap) - イメージヒストグラムの再マッピング.
* [imgSeek](https://sourceforge.net/projects/imgseek/) - 視覚的類似性を使用して画像のコレクションを検索するプロジェクト.
* [nude.py](https://github.com/hhatto/nude.py) - Nudity 検出.
* [pagan](https://github.com/daboth/pagan) - 入力文字列とハッシュに基づくレトロ identicon（アバター）の生成.
* [pillow](https://github.com/python-pillow/Pillow) - Pillow はフレンドリーな [PIL](http://www.pythonware.com/products/pil/) のフォークです.
* [pyBarcode](https://pythonhosted.org/pyBarcode/) - PIL を必要とせずに Python でバーコードを作成します.
* [pygram](https://github.com/ajkumar25/pygram) - Instagram のような画像フィルタ.
* [python-qrcode](https://github.com/lincolnloop/python-qrcode) - 純粋な Python QR コードジェネレータ.
* [Quads](https://github.com/fogleman/Quads) - 四分木に基づくコンピュータアート.
* [scikit-image](http://scikit-image.org/) - 科学的な）画像処理のための Python ライブラリ.
* [thumbor](https://github.com/thumbor/thumbor) - スマートイメージングサービス. オンデマンドでの作成, イメージのサイズ変更および反転を可能にする.
* [wand](https://github.com/dahlia/wand) - [MagickWand](http://www.imagemagick.org/script/magick-wand.php) の Python バインディング, ImageMagick の C API.


## 実装

*Python の実装*

* [CPython](https://github.com/python/cpython) - **C で書かれた Python プログラミング言語の, デフォルトで最も広く使われている実装.** Python 用の Static Compiler の最適化. タイプミックスインを使用して Python を C または C++ モジュールにコンパイルすると, パフォーマンスが大幅に向上します.
* [Cython](http://cython.org/) - Python に最適化されたスタティックコンパイラ.
* [CLPython](https://github.com/metawilm/cl-python) - Common Lisp で書かれた Python プログラミング言語の実装.
* [Grumpy](https://github.com/google/grumpy) - インタプリタよりコンパイラの方がより強力な CPython 2.7 の置き換え (Alpha) です.
* [IronPython](https://github.com/IronLanguages/ironpython3) - C＃ で書かれた Python.
* [Jython](https://hg.python.org/jython) - Java 仮想マシン (JVM) の Java で書かれた Python プログラミング言語の実装.
* [MicroPython](https://github.com/micropython/micropython) - 効率的で効率的な Python プログラミング言語の実装.
* [Numba](http://numba.pydata.org/) - 科学的 Python を対象とした LLVM 用 Python JIT コンパイラです.
* [PeachPy](https://github.com/Maratyszcza/PeachPy) - Python に組み込まれた x86-64 アセンブラ.
* [Pyjion](https://github.com/Microsoft/Pyjion) - CoreCLR に基づく Python の JIT.
* [PyPy](https://bitbucket.org/pypy/pypy) - 非常に高速な Python.
* [Pyston](https://github.com/dropbox/pyston) - JIT 技術を使用して構築されたPython の実装.
* [Stackless Python](https://github.com/stackless-dev/stackless/wiki) - Python プログラミング言語の拡張.


## インタラクティブ・インタプリタ

*インタラクティブな Python インタプリタ（REPL）*

* [bpython](https://github.com/bpython/bpython) - Python インタプリタへの気の利いたインターフェイスです.
* [Jupyter Notebook (IPython)](https://jupyter.org) - Python をインタラクティブに使いこなすための豊富なツールキットです.
    * [awesome-jupyter](https://github.com/markusschanta/awesome-jupyter)
* [ptpython](https://github.com/jonathanslenders/ptpython) - 高度な Python REPL は, [python-prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit) 上に構築されています.


## 国際化

*i18n のためのライブラリ*

* [Babel](http://babel.pocoo.org/en/latest/) - Python の国際化ライブラリ.
* [PyICU](https://github.com/ovalhub/pyicu) - Unicode C++ ライブラリ ([ICU](http://site.icu-project.org/)) 用の国際コンポーネントのラッパーです.


## ジョブスケジューラ

*ジョブをスケジューリングするためのライブラリ*

* [APScheduler](http://apscheduler.readthedocs.io/en/latest/) - 軽量ながら強力なインプロセス・タスク・スケジューラーで, 機能のスケジュールを設定できます.
* [django-schedule](https://github.com/thauber/django-schedule) - Django のカレンダーアプリです.
* [doit](http://pydoit.org/) - タスクランナーとビルドツール.
* [gunnery](https://github.com/gunnery/gunnery) - Web ベースのインターフェースを備えた分散システム用の多目的タスク実行ツール.
* [Joblib](https://joblib.readthedocs.io/) - Python で軽量パイプライニングを提供する一連のツール.
* [Plan](https://github.com/fengsp/plan) - Python で crontab ファイルを書く.
* [schedule](https://github.com/dbader/schedule) - Python ジョブスケジューリング.
* [Spiff](https://github.com/knipknap/SpiffWorkflow) - 純粋な Python で実装された強力なワークフローエンジン.
* [TaskFlow](https://docs.openstack.org/developer/taskflow/) - タスクの実行を簡単, 一貫性, 信頼性の高いものにするための Python ライブラリです.
* [Airflow](https://airflow.apache.org/) - Airflow は, プログラムでワークフローを作成, スケジュール設定, 監視するためのプラットフォームです.


## ロギング

*ログを生成して作業するためのライブラリ*

* [Eliot](https://github.com/ScatterHQ/eliot) - 複雑で分散したシステムのためのロギング.
* [logbook](http://logbook.readthedocs.io/en/stable/) - Python のロギング置換.
* [logging](https://docs.python.org/3/library/logging.html) - Python のロギング機能 (Python 標準ライブラリ).
* [raven](https://github.com/getsentry/raven-python) - Sentry の Python クライアント, ログ/エラートラッキング, クラッシュレポート, Web アプリケーションの集計プラットフォーム.


## 機械学習

*機械学習のためのライブラリ*
*[Awesome Machine Learning](https://github.com/josephmisiti/awesome-machine-learning#python) も参照してください*

* [H2O](https://github.com/h2oai/h2o-3) - オープンソースの, 高速で柔軟な機械学習プラットフォーム.
* [Metrics](https://github.com/benhamner/Metrics) -　機械学習評価指標.
* [NuPIC](https://github.com/numenta/nupic) - インテリジェントコンピューティングのための Numenta プラットフォーム.
* [scikit-learn](http://scikit-learn.org/) - Machine Learning の最も一般的な Python ライブラリ.
* [Spark ML](http://spark.apache.org/docs/latest/ml-guide.html) - [Apache Spark](http://spark.apache.org/) のスケーラブルな機械学習ライブラリ.
* [vowpal_porpoise](https://github.com/josephreisinger/vowpal_porpoise) - [Vowpal Wabbit](https://github.com/JohnLangford/vowpal_wabbit/) 用の軽量 Python ラッパーです.
* [xgboost](https://github.com/dmlc/xgboost) - スケーラブルで, ポータブルで, 分散した, グラジエントブースティングライブラリ.


## Microsoft Windows

*Microsoft Windows での Python プログラミング*

* [Python(x,y)](http://python-xy.github.io/) - Qt と Spyder をベースにした科学的アプリケーション指向の Python ディストリビューション.
* [pythonlibs](http://www.lfd.uci.edu/~gohlke/pythonlibs/) - Python 拡張パッケージ用の非公式 Windows バイナリ.
* [PythonNet](https://github.com/pythonnet/pythonnet) - Python と .NET 共通言語ランタイム（CLR）の統合.
* [PyWin32](https://sourceforge.net/projects/pywin32/) - Windows 用の Python 拡張.
* [WinPython](https://winpython.github.io/) - Windows 7/8 用ポータブル開発環境.


## その他

*上記のカテゴリに適合しない有用なライブラリまたはツール*

* [blinker](https://github.com/jek/blinker) - 高速の Python インプロセスシグナル/イベントディスパッチシステム.
* [boltons](https://github.com/mahmoud/boltons) - Python ユーティリティのセット.
* [itsdangerous](https://github.com/pallets/itsdangerous) - 信頼できるデータを信頼できない環境に渡すためのさまざまなヘルパー.
* [pluginbase](https://github.com/mitsuhiko/pluginbase) - シンプルだが柔軟な Python 用のプラグインシステム.
* [tryton](http://www.tryton.org/) - 汎用ビジネスフレームワーク.


## 自然言語処理

*自然言語を扱うためのライブラリ*

### 一般

* [gensim](https://github.com/RaRe-Technologies/gensim) - 人間のためのトピックモデリング.
* [langid.py](https://github.com/saffsd/langid.py) - スタンドアローンの言語識別システム.
* [nltk](http://www.nltk.org/) - 自然言語データを扱う Python プログラムを構築するための最先端のプラットフォームです.
* [pattern](http://www.clips.ua.ac.be/pattern) - Python 用の Web マイニングモジュール.
* [polyglot](https://github.com/aboSamoor/polyglot) - 何百もの言語をサポートする自然言語パイプライン.
* [pytext](https://github.com/facebookresearch/pytext) - PyTorchに基づく自然言語モデリングフレームワーク. 
* [PyTorch-NLP](https://github.com/PetrochukM/PyTorch-NLP) - 迅速に, NLPのプロトタイピングによる深層学習を可能にするツールキット.
* [spacy](https://spacy.io/) - Python と Cython が利用できる, 業界最高の自然言語処理用のライブラリ.
* [stanfordnlp](https://github.com/stanfordnlp/stanfordnlp) - 50 以上の言語をサポートする Stanford NLP Group の公式 Python ライブラリ.

### 中国語

* [Jieba](https://github.com/fxsjy/jieba) - 中国語のテキストセグメンテーション.
* [pkuseg-python](https://github.com/lancopku/pkuseg-python) - さまざまな分野における中国語の単語分割のためのツールキット.
* [SnowNLP](https://github.com/isnowfy/snownlp) - 中国語テキストを処理するためのライブラリ.
* [funNLP](https://github.com/fighting41love/funNLP) - 中国のNLPのためのツールとデータセットのコレクション.


## ネットワークの仮想化

*バーチャルネットワーキングと SDN（Software Defined Networking）のためのツールとライブラリ*

* [mininet](https://github.com/mininet/mininet) - 一般的なネットワークエミュレータと Python で書かれた API.
* [pox](https://github.com/noxrepo/pox) - OpenFlow SDN コントローラなど, Python ベースのソフトウェア定義ネットワーク（SDN）コントロールアプリケーション用のオープンソース開発プラットフォーム.


## ネットワーキング

*ネットワーキングプログラミングのためのライブラリ*

* [asyncio](https://docs.python.org/3/library/asyncio.html) - 非同期入出力, イベントループ, コルーチン, およびタスク (Python 標準ライブラリ).
    * [awesome-asyncio](https://github.com/timofurrer/awesome-asyncio)
* [pulsar](https://github.com/quantmind/pulsar) - イベント駆動型の Python の並行フレームワーク.
* [pyzmq](http://zeromq.github.io/pyzmq/) - ZeroMQ メッセージライブラリ用の Python ラッパー.
* [Twisted](https://twistedmatrix.com/trac/) - イベント駆動型ネットワーキングエンジン.
* [napalm](https://github.com/napalm-automation/napalm) - ネットワークデバイスを操作するためのクロスベンダー API.


## ニュースフィード

*ユーザアクティビティを構築するためのライブラリ*

* [django-activity-stream](https://github.com/justquick/django-activity-stream) - サイトのアクションからジェネリックアクティビティストリームを生成します.
* [Stream Framework](https://github.com/tschellenbach/Stream-Framework) - Cassandra と Redis を使用したニュースフィードと通知システムの構築.


## ORM

*オブジェクトリレーショナルマッピングまたはデータマッピングテクニックを実装するライブラリ*

### リレーショナルデータベース

* [Django Models](https://docs.djangoproject.com/en/dev/topics/db/models/) - Django の一部です.
* [SQLAlchemy](https://www.sqlalchemy.org/) - Python SQL Toolkit と Object Relational Mapper です.
    * [Awesome Sqlalchemy](https://github.com/dahlia/awesome-sqlalchemy)
* [dataset](https://github.com/pudo/dataset) - データベースに Python dict を保存する - SQLite, MySQL, そして PostgreSQL で動作します.
* [orator](https://github.com/sdispater/orator) - Orator ORM はシンプルで美しい ActiveRecord の実装を提供します.
* [peewee](https://github.com/coleifer/peewee) - 小さく表現力のある ORM.
* [pony](https://github.com/ponyorm/pony/) - SQL にジェネレータ指向のインタフェースを提供する ORM.
* [pydal](https://github.com/web2py/pydal/) - 純粋な Python によるデータベースアブストラクションレイヤー.

### NoSQL データベース

* [hot-redis](https://github.com/stephenmcd/hot-redis) - Redis の豊富なPythonデータ型.
* [mongoengine](https://github.com/MongoEngine/mongoengine) - MongoDB と連携するための Python Object-Document-Mapper です.
* [PynamoDB](https://github.com/pynamodb/PynamoDB) - [Amazon DynamoDB](https://aws.amazon.com/dynamodb/) の Pythonic インターフェイス.
* [redisco](https://github.com/kiddouk/redisco) - Redis で保持されているシンプルなモデルとコンテナのための Python ライブラリ.

## パッケージ管理

*パッケージと依存関係管理のためのライブラリ*

* [pip](https://pip.pypa.io/en/stable/) - Python パッケージと依存関係マネージャ.
    * [PyPI](https://pypi.org/)
    * [pip-tools](https://github.com/jazzband/pip-tools) - 固定された Python 依存関係を新鮮に保つためのツールセット.
* [conda](https://github.com/conda/conda/) - クロスプラットフォーム, Python に依存しないバイナリパッケージマネージャ.


## パッケージレポジトリ

*ローカルの PyPI リポジトリサーバとプロキシ*

* [warehouse](https://github.com/pypa/warehouse) - 次世代の Python パッケージリポジトリ (PyPI).
* [bandersnatch](https://bitbucket.org/pypa/bandersnatch) - Python Packaging Authority（PyPA）が提供する PyPI ミラーリングツール.
* [devpi](http://doc.devpi.net/latest/) - PyPI サーバとパッケージング/テスト/リリースツール.
* [localshop](https://github.com/jazzband/localshop) - ローカル PyPI サーバー（カスタムパッケージと pypi の自動ミラーリング）.


## 権限

*ユーザーがデータまたは機能にアクセスすることを許可または拒否するライブラリ*

* [django-guardian](https://github.com/django-guardian/django-guardian) - Django 1.2 以降のオブジェクトごとのパーミッションの実装.
* [django-rules](https://github.com/dfunckt/django-rules) - データベースを必要とせずにオブジェクトレベルの権限を Django に提供する, 小型で強力なアプリケーションです.


## プロセス

*OS プロセスを開始および通信するためのライブラリ*

* [delegator.py](https://github.com/kennethreitz/delegator.py) - Humans™ による [Subprocesses](https://docs.python.org/3/library/subprocess.html).
* [sarge](https://sarge.readthedocs.io/en/latest/) - subprocess のためのさらに別のラッパー.
* [sh](https://github.com/amoffat/sh) - Python の完全な subprocess 置き換え.


## キュー

*イベントキューとタスクキューを操作するためのライブラリ*

* [celery](http://www.celeryproject.org/) - 分散メッセージ・パッシングに基づく非同期タスク・キュー/ジョブ・キュー.
* [huey](https://github.com/coleifer/huey) - リトルマルチスレッドタスクキュー.
* [mrq](https://github.com/pricingassistant/mrq) - Mr. Queue - Redis ＆ gevent を使用した Python の分散ワーカータスクキュー.
* [rq](https://python-rq.org/) - Python の単純ジョブキュー.


## レコメンドシステム

*レコメンドシステム構築のためのライブラリ*

* [annoy](https://github.com/spotify/annoy) - メモリ使用量が最適化された C++/Python の最近傍探索.
* [fastFM](https://github.com/ibayer/fastFM) - ファクタライゼーションマシン用ライブラリ.
* [implicit](https://github.com/benfred/implicit) - 暗黙のデータセットに対するコラボレーティブなフィルタリングの高速 Python 実装.
* [libffm](https://github.com/guestwalk/libffm) - Field-aware Factorization Machine（FFM）のためのライブラリ.
* [lightfm](https://github.com/lyst/lightfm) - 多数の人気のあるレコメンドアルゴリズムの Python 実装.
* [spotlight](https://github.com/maciejkula/spotlight) - PyTorch を使ったディープレコメンダーモデル.
* [surprise](https://github.com/NicolasHug/Surprise) - レコメンドシステムの構築と分析のための scikit.
* [tensorrec](https://github.com/jfkirk/tensorrec) - TensorFlow のレコメンドエンジンフレームワーク.


## RESTful API

*RESTful API を開発するためのライブラリ*

### Django
* [django-rest-framework](http://www.django-rest-framework.org/) - Web API を構築するための強力かつ柔軟なツールキットです.
* [django-tastypie](http://tastypieapi.org/) - Django アプリケーション用のデリシャスな API を作成します.

### Flask

* [eve](https://github.com/pyeve/eve) - Flask, MongoDB による REST API フレームワーク.
* [flask-api-utils](https://github.com/marselester/flask-api-utils) - Flask の API 表現と認証を担当します.
* [flask-api](http://www.flaskapi.org/) - Flask のブラウズ可能な Web API.
* [flask-restful](https://github.com/flask-restful/flask-restful) - Flask の REST API をすばやく構築します.
* [flask-restless](https://github.com/jfinkels/flask-restless) - SQLAlchemy で定義されたデータベースモデル用の RESTful API の生成.

### Pyramid

* [cornice](https://github.com/Cornices/cornice) - Pyramid のための RESTful フレームワーク.

### Framework agnostic

* [apistar](https://github.com/encode/apistar) - Python 3 用に設計されたスマート Web API フレームワーク.
* [falcon](http://falconframework.org/) - クラウド API と Web アプリケーションバックエンドを構築するための高性能フレームワーク.
* [hug](https://github.com/timothycrosley/hug) - きれいな API を公開するための Python 3 フレームワーク.
* [restless](https://github.com/toastdriven/restless) - Tastypie から学んだ教訓に基づく, フレームワークにとらわれない REST フレームワーク.
* [ripozo](https://github.com/vertical-knowledge/ripozo) - すぐに REST / HATEOAS / Hypermedia API を作成します.
* [sandman](https://github.com/jeffknupp/sandman) - 既存のデータベース駆動型システム用の自動 REST API.

## ロボティクス

*ロボティクスのためのライブラリ*

* [PythonRobotics](https://github.com/AtsushiSakai/PythonRobotics) - これは, コンパイルされ視覚化された様々なロボットアルゴリズムです.
* [rospy](http://wiki.ros.org/rospy) - ROS (Robot Operating System) のためのライブラリです.


## RPC サーバ

*RPC 互換サーバー*

* [SimpleJSONRPCServer](https://github.com/joshmarshall/jsonrpclib/) - このライブラリは, JSON-RPC 仕様の実装です.
* [SimpleXMLRPCServer](https://docs.python.org/3/library/simplexmlrpcserver.html) - 単純な XML-RPC サーバ実装. シングルスレッド化 (Python 標準ライブラリ).
* [zeroRPC](https://github.com/0rpc/zerorpc-python) - zerorpc は, [ZeroMQ](http://zeromq.org/) と [MessagePack](http://msgpack.org/) に基づく柔軟な RPC 実装です.


## 科学

*科学計算のためのライブラリ*

* [astropy](http://www.astropy.org/) - 天文学のためのコミュニティ Python ライブラリ.
* [bcbio-nextgen](https://github.com/chapmanb/bcbio-nextgen) - 完全自動ハイスループットシーケンシング解析のためのベストプラクティスパイプラインを提供します.
* [bccb](https://github.com/chapmanb/bcbb) - 生物学的解析に関連する有用なコードの集まり.
* [Biopython](http://biopython.org/wiki/Main_Page) - Biopython は, 生物学的計算のために自由に利用できるツールのセットです.
* [cclib](http://cclib.github.io/) - 計算化学パッケージの結果を解析して解釈するためのライブラリ.
* [Colour](http://colour-science.org/) - カラー理論の変換とアルゴリズムの包括的な数の実装.
* [NetworkX](https://networkx.github.io/) - 複雑なネットワークのための生産性の高いソフトウェアです.
* [NIPY](http://nipy.org) - 神経イメージングツールキットのコレクション.
* [NumPy](http://www.numpy.org/) - Python を使った科学計算の基本パッケージ.
* [Open Babel](http://openbabel.org/wiki/Main_Page) - 化学データの多くの言語を話すように設計された化学ツールボックス.
* [ObsPy](https://github.com/obspy/obspy/wiki/) - 地震学のための Python ツールボックス.
* [PyDy](http://www.pydy.org/) - 動的動作のモデリングにおけるワークフローを支援するために使用される. Python Dynamics の略.
* [PyMC](https://github.com/pymc-devs/pymc3) - マルコフ連鎖モンテカルロ法サンプリングツールキット.
* [RDKit](http://www.rdkit.org/) - ケモインフォマティクスと機械学習ソフトウェア.
* [QuTiP](http://qutip.org/) - Quantum ツールボックス.
* [SciPy](https://www.scipy.org/) - 数学, 科学, 工学のためのオープンソースソフトウェアの Python ベースのエコシステム.
* [SimPy](https://bitbucket.org/simpy/simpy) - プロセスベースの分散イベントシミュレーションフレームワーク
* [statsmodels](https://github.com/statsmodels/statsmodels) - Python の統計モデリングと計量経済学.
* [SymPy](https://github.com/sympy/sympy) - シンボリック数学のための Python ライブラリ.
* [Zipline](https://github.com/quantopian/zipline) - Python アルゴリズムトレーディングライブラリ.


## 検索

*データの索引付けと検索のためのライブラリとソフトウェア*

* [elasticsearch-py](https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html) - [Elasticsearch](https://www.elastic.co/products/elasticsearch) の公式低レベル Python クライアント.
* [elasticsearch-dsl-py](https://github.com/elastic/elasticsearch-dsl-py) - Elasticsearch のための公式の高水準 Python クライアント.
* [django-haystack](https://github.com/django-haystack/django-haystack) - Django のモジュール検索.
* [pysolr](https://github.com/django-haystack/pysolr) - [Apache Solr](https://lucene.apache.org/solr/) 用の軽量 Python ラッパー (SolrCloud awareness を含む).
* [whoosh](http://whoosh.readthedocs.io/en/latest/) - 高速で純粋な Python 検索エンジンライブラリ.


## シリアライゼーション

*複雑なデータ型を直列化するためのライブラリ*

* [marshmallow](https://github.com/marshmallow-code/marshmallow) - 複雑なオブジェクトを単純な Python データ型との間で変換するための軽量ライブラリ.
* [pysimdjson](https://github.com/TkTech/pysimdjson) - [simdjson](https://github.com/lemire/simdjson) の Python バインディング.
* [python-rapidjson](https://github.com/python-rapidjson/python-rapidjson) - [RapidJSON](https://github.com/Tencent/rapidjson) の Python ラッパー.


## サーバレスフレームワーク

*サーバレス Python コードを開発するためのフレームワーク*

* [python-lambda](https://github.com/nficano/python-lambda) - AWS Lambda で Python コードを開発し, 展開するためのツールキットです.
* [Zappa](https://github.com/Miserlou/Zappa) - AWS Lambda と API Gateway に WSGI アプリケーションを導入するためのツール.


## 特定テキスト形式処理

*特定のテキスト形式を解析し操作するためのライブラリ*

### 一般

* [tablib](https://github.com/kennethreitz/tablib) - XLS, CSV, JSON, YAML の表データセットのモジュール.

### オフィス

* [openpyxl](https://openpyxl.readthedocs.io/en/stable/) - Excel 2010 xlsx / xlsm / xltx / xltm ファイルを読み書きするためのライブラリです.
* [pyexcel](https://github.com/pyexcel/pyexcel) - csv, ods, xls, xlsx, xlsm ファイルを読み込み, 操作し, 書き込む API を提供します.
* [python-docx](https://github.com/python-openxml/python-docx) - Microsoft Word 2007/2008 の docx ファイルを読み込み, 照会し, 変更します.
* [python-pptx](https://github.com/scanny/python-pptx) - PowerPoint (.pptx) ファイルを作成および更新するための Python ライブラリ.
* [unoconv](https://github.com/dagwieers/unoconv) - LibreOffice / OpenOffice でサポートされている任意のドキュメント形式を変換します.
* [XlsxWriter](https://xlsxwriter.readthedocs.io) - Excel の .xlsx ファイルを作成するための Python モジュール.
* [xlwings](https://xlwings.org/) - BSD ライセンスのライブラリで, Excel から Python を呼び出すことが容易になります.
* [xlwt](https://github.com/python-excel/xlwt) / [xlrd](https://github.com/python-excel/xlrd) - Excel ファイルからのデータと書式情報の書き込みと読み取り.

### PDF

* [PDFMiner](https://github.com/euske/pdfminer) - PDF ドキュメントから情報を抽出するツール.
* [PyPDF2](https://github.com/mstamy2/PyPDF2) - PDF ページの分割, マージ, 変換が可能なライブラリ.
* [ReportLab](https://www.reportlab.com/opensource/) - 豊富な PDF ドキュメントの迅速な作成を可能にします.

### Markdown

* [Mistune](https://github.com/lepture/mistune) - Markdown の最も高速でフル機能の純粋な Python パーサです.
* [Python-Markdown](https://github.com/waylan/Python-Markdown) - John Gruber の Markdown の Python 実装です.

### YAML

* [PyYAML](http://pyyaml.org/) - Python の YAML 実装.

### CSV

* [csvkit](https://github.com/wireservice/csvkit) - CSV に変換して作業するためのユーティリティ.

### アーカイブ

* [unp](https://github.com/mitsuhiko/unp) - アーカイブを簡単に解凍できるコマンドラインツール.


## スタティックサイトジェネレータ

*スタティックサイトジェネレータは, テキスト + テンプレートを入力として受け取り, HTML ファイルを生成するソフトウェアです*

* [mkdocs](https://github.com/mkdocs/mkdocs/) - Markdown と親和性の高いドキュメントジェネレーター.
* [pelican](https://blog.getpelican.com/) - Markdown とreST の構文をサポートする静的サイトジェネレータ.
* [lektor](https://www.getlektor.com/) - 使いやすい静的 CMS とブログエンジン.
* [nikola](https://www.getnikola.com/) - 静的なウェブサイトとブログジェネレータ.


## タグ付け

*アイテムをタグ付けするためのライブラリ*

* [django-taggit](https://github.com/jazzband/django-taggit) - Django の簡単なタグ付け.


## テンプレートエンジン

*テンプレートとレキシングのためのライブラリとツール*

* [Jinja2](https://github.com/pallets/jinja) - 近代的でデザイナーに優しいテンプレート言語. Template -> Temple -> Jinja.
* [Genshi](https://genshi.edgewall.org/) - Web 対応の出力を生成するための Python テンプレートツールキット.
* [Mako](http://www.makotemplates.org/) - プラットフォーム用の高速で軽量なテンプレート.


## テスティング

*コードベーステストを行い, テストデータを生成するためのライブラリ*

### テスティングフレームワーク

* [hypothesis](https://github.com/HypothesisWorks/hypothesis-python) - Hypothesis は, 高度な Quickcheck スタイルのプロパティベーステストライブラリです.
* [nose2](https://github.com/nose-devs/nose2) - unittest2 に基づく, nose の後継です.
* [pytest](https://docs.pytest.org/en/latest/) - 完成した完全機能の Python テストツール.
* [Robot Framework](https://github.com/robotframework/robotframework) - 一般的なテスト自動化フレームワーク.
* [unittest](https://docs.python.org/3/library/unittest.html) - ユニットテストフレームワーク (Python 標準ライブラリ).

### テストランナー

* [green](https://github.com/CleanCut/green) - きれいでカラフルなテストランナー.
* [mamba](http://nestorsalceda.github.io/mamba/) - Python のための決定的なテストツール. BDD の旗のもとに生まれました.
* [tox](https://tox.readthedocs.io/en/latest/) - 複数の Python バージョンで自動的にビルドとテストを行います.

### GUI/Web テスティング

* [locust](https://github.com/locustio/locust) - Python で書かれたスケーラブルなユーザー負荷テストツール.
* [PyAutoGUI](https://github.com/asweigart/pyautogui) - PyAutoGUI は, 人間のためのクロスプラットフォームの GUI オートメーション Python モジュールです.
* [Selenium](pypi.org/project/selenium/) - [Selenium](http://www.seleniumhq.org/) WebDriver の Python バインディング.
* [sixpack](https://github.com/seatgeek/sixpack) - 言語にとらわれない A / B テストフレームワーク.
* [splinter](https://github.com/cobrateam/splinter) - Web アプリケーションをテストするためのオープンソースツール.

### モック

* [mock](https://docs.python.org/3/library/unittest.mock.html) - mocking と patching ライブラリ (Python 標準ライブラリ).
* [doublex](https://pypi.org/project/doublex/) - 強力なテストは Python のフレームワークを2倍にします.
* [freezegun](https://github.com/spulec/freezegun) - datetime モジュールをあざ笑うように時間を巡ります.
* [httmock](https://github.com/patrys/httmock) - Python 2.6 以上と 3.2 以上のリクエストに対する mocking ライブラリ.
* [httpretty](https://github.com/gabrielfalcao/HTTPretty) - Python の HTTP リクエストモックツール.
* [mocket](https://github.com/mindflayer/python-mocket) - gevent / asyncio / SSL をサポートするソケットモックフレームワーク.
* [responses](https://github.com/getsentry/responses) - リクエストの Python ライブラリを模倣するためのユーティリティライブラリ.
* [VCR.py](https://github.com/kevin1024/vcrpy) - テストでの HTTP インタラクションの記録と再生.

### オブジェクトファクトリ

* [factory_boy](https://github.com/FactoryBoy/factory_boy) - Python のテストフィクスチャの置き換え.
* [mixer](https://github.com/klen/mixer) - 別のフィクスチャ置き換え. Django, Flask, SQLAlchemy, Peewee 等がサポートされています.
* [model_mommy](https://github.com/vandersonmota/model_mommy) - Django でテストするためのランダムなフィクスチャを作成します.

### コードカバレッジ

* [coverage](https://pypi.org/project/coverage/) - コードカバレッジ測定.

### フェイクデータ

* [mimesis](https://github.com/lk-geimfari/mimesis) - mimesis は, 偽のデータを生成するのに役立つ Python ライブラリです.
* [fake2db](https://github.com/emirozer/fake2db) - 偽のデータベースジェネレータ.
* [faker](https://github.com/joke2k/faker) - 偽のデータを生成する Python パッケージ.
* [radar](https://pypi.org/project/radar/) - ランダムな日時を生成する.


## テキスト処理

*プレーンテキストの解析と操作のためのライブラリ*

### 一般

* [chardet](https://github.com/chardet/chardet) - Python 2/3 互換の文字エンコーディング検出器.
* [difflib](https://docs.python.org/3/library/difflib.html) - デルタを計算するヘルパー (Python 標準ライブラリ).
* [ftfy](https://github.com/LuminosoInsight/python-ftfy) - 壊れにくく, より一貫性のある Unicode テキストの自動作成を可能にします.
* [fuzzywuzzy](https://github.com/seatgeek/fuzzywuzzy) - ファジーストリングマッチング.
* [Levenshtein](https://github.com/ztane/python-Levenshtein/) - レーベンシュタイン距離と文字列類似度の高速計算.
* [pangu.py](https://github.com/vinta/pangu.py) - CJK と英数字のためのテキストの間隔.
* [pyfiglet](https://github.com/pwaller/pyfiglet) - Python での figlet の実装.
* [pypinyin](https://github.com/mozillazg/python-pinyin) -　中国語をピンインに変換します.
* [textdistance](https://github.com/orsinium/textdistance) - 配列間の距離を計算する 30 以上のアルゴリズム.
* [unidecode](https://pypi.org/project/Unidecode/) - Unicode テキストの ASCII 変換.

### Slugify

* [awesome-slugify](https://github.com/dimka665/awesome-slugify) - Unicode を保存できる Python のスラグ化ライブラリ.
* [python-slugify](https://github.com/un33k/python-slugify) - Unicode を ASCII に変換する Python のスラグ化ライブラリ.
* [unicode-slugify](https://github.com/mozilla/unicode-slugify) - Django を依存関係として Unicode スラグを生成するスラグライザです.

### 固有識別子

* [hashids](https://github.com/davidaurelio/hashids-python) - Python での [hashids](http://hashids.org) の実装.
* [shortuuid](https://github.com/skorokithakis/shortuuid) - 簡潔かつ明白で URL セーフな UUID のためのジェネレータライブラリ.

### パーサー

* [ply](http://www.dabeaz.com/ply/) - Python のための lex と yacc の解析ツールの実装.
* [pygments](http://pygments.org/) - 一般的な構文ハイライターです.
* [pyparsing](https://github.com/pyparsing/pyparsing/) - パーサーを生成する汎用フレームワーク.
* [python-nameparser](https://github.com/derek73/python-nameparser) - 人間の名前を個々のコンポーネントに解析します.
* [python-phonenumbers](https://github.com/daviddrysdale/python-phonenumbers) - 国際電話番号の解析, 書式設定, 保存および検証.
* [python-user-agents](https://github.com/selwin/python-user-agents) - ブラウザユーザエージェントパーサ.
* [sqlparse](https://github.com/andialbrecht/sqlparse) - 非検証SQLパーサ.


## サードパーティ APIs

*第三者サービス API にアクセスするためのライブラリ*
*[Python API ラッパーとライブラリのリスト](https://github.com/realpython/list-of-python-api-wrappers) も参照してください*

* [apache-libcloud](https://libcloud.apache.org/) - すべてのクラウド用の Python ライブラリ.
* [boto3](https://github.com/boto/boto3) - Amazon Web Services への Python インタフェース.
* [django-wordpress](https://github.com/istrategylabs/django-wordpress) - WordPress のモデルと Django のビュー.
* [facebook-sdk](https://github.com/mobolic/facebook-sdk) - Facebook プラットフォーム Python SDK.
* [google-api-python-client](https://github.com/google/google-api-python-client) - Python 用 Google API クライアントライブラリ.
* [gspread](https://github.com/burnash/gspread) - Google スプレッドシート Python API.
* [twython](https://github.com/ryanmcgrath/twython) - Twitter API の Python ラッパー.


## URL 解析

*URLを解析するためのライブラリ*

* [furl](https://github.com/gruns/furl) - URL の解析と操作を簡単にする小さな Python ライブラリ.
* [purl](https://github.com/codeinthehole/purl) - 問い合わせと操作のためのきれいな API を持つシンプルで不変な URL クラス.
* [pyshorteners](https://github.com/ellisonleao/pyshorteners) - 純粋な Python の URL 短縮ライブラリです.
* [webargs](https://github.com/sloria/webargs) - ポピュラーな Web フレームワークのサポートが組み込まれた, HTTP リクエストの引数を解析するためのフレンドリーなライブラリです.


## ビデオ

*ビデオと GIF を操作するためのライブラリ*

* [moviepy](https://zulko.github.io/moviepy/) - アニメーション GIF を含む多くのフォーマットのスクリプトベースのムービー編集用モジュール.
* [scikit-video](https://github.com/aizvorski/scikit-video) - SciPy のビデオ処理ルーチン.


## WSGI サーバ

*WSGI 互換の Web サーバー*

* [bjoern](https://pypi.python.org/pypi/bjoern) - 非同期で, 非常に高速で, C で書かれています.
* [gunicorn](https://pypi.python.org/pypi/gunicorn) - プリフォークされ, 部分的に C 言語で書かれています.
* [uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/) - プロジェクトは, C で書かれたホスティングサービスを構築するための完全なスタックを開発することを目指しています.
* [waitress](https://github.com/Pylons/waitress) - マルチスレッド, powers Pyramid.
* [werkzeug](https://github.com/pallets/werkzeug) - Flask に権限を与え, 自分のプロジェクトに簡単に埋め込むことができる Python 用の WSGI ユーティリティライブラリ.


## Web アセットマネジメント

*ウェブサイトのアセットを管理・圧縮するためのツール群*

* [django-compressor](https://github.com/django-compressor/django-compressor) - リンクおよびインライン JavaScript または CSS を単一のキャッシュファイルに圧縮します.
* [django-pipeline](https://github.com/jazzband/django-pipeline) - Django のためのアセットパッケージングライブラリ.
* [django-storages](https://github.com/jschneier/django-storages) - Django のためのカスタムストレージバックエンドコレクション.
* [fanstatic](http://www.fanstatic.org/en/latest/) - Python パッケージとしての静的ファイル依存性のパッケージ化, 最適化, および提供.

##ウェブコンテンツ抽出

*Web コンテンツを抽出するためのライブラリ*

* [html2text](https://github.com/Alir3z4/html2text) - HTML を Markdown 形式のテキストに変換します.
* [lassie](https://github.com/michaelhelmick/lassie) - 人間のための Web コンテンツ検索.
* [micawber](https://github.com/coleifer/micawber) - URL からリッチコンテンツを抽出するための小さなライブラリ.
* [newspaper](https://github.com/codelucas/newspaper) - ニュース抽出, 記事抽出, Python のコンテンツのキュレーション.
* [python-readability](https://github.com/buriy/python-readability) - arc90 の可読性ツールの, 高速 Python ポート.
* [requests-html](https://github.com/kennethreitz/requests-html) - 人間のための Pythonic HTML パーシング.
* [sumy](https://github.com/miso-belica/sumy) - テキスト文書とHTMLページの自動要約のためのモジュール.
* [textract](https://github.com/deanmalmgren/textract) - 任意の文書, Word, PowerPoint, PDF などからテキストを抽出します.
* [toapi](https://github.com/gaojiuli/toapi) - すべての Web サイトが APIs を提供.


## ウェブクローリング

*ウェブスクレイピングを自動化するためのライブラリ*

* [cola](https://github.com/chineking/cola) - 分散型クロールフレームワーク.
* [feedparser](http://pythonhosted.org/feedparser/) - ユニバーサルフィードパーサー
* [Grab](http://grablib.org/) - サイトスクレイピングフレームワーク.
* [MechanicalSoup](https://github.com/MechanicalSoup/MechanicalSoup) - ウェブサイトとのやりとりを自動化するためのPythonライブラリ.
* [pyspider](https://github.com/binux/pyspider) - 強力なスパイダーシステム.
* [robobrowser](https://github.com/jmcarp/robobrowser) - スタンドアロンの Web ブラウザを使用せずに Web をブラウズするシンプルな Pythonic ライブラリ.
* [scrapy](https://scrapy.org/) - 高速で高レベルのスクリーンスクレイピングと Web クロールフレームワーク.
* [portia](https://github.com/scrapinghub/portia) - Scrapy のためのビジュアルスクレイピング.


## ウェブフレームワーク

*フルスタックウェブフレームワーク*

* [Bottle](http://bottlepy.org/docs/dev/index.html) - 高速でシンプルで軽量な WSGI マイクロウェブフレームワークです.
* [Dash](https://plot.ly/products/dash/) - Flask, React, Plotly の上に構築される, 分析的な Web アプリケーション.
    * [awesome-dash](https://github.com/Acrotrend/awesome-dash)
* [Django](https://www.djangoproject.com/) - Python で最も人気のある Web フレームワークです.
    * [Awesome Django](https://github.com/shahraizali/awesome-django)
* [Flask](http://flask.pocoo.org/) - Python 用のマイクロフレームワークです.
    * [Awesome Flask](https://github.com/humiaozuzu/awesome-flask)
* [Masonite](https://github.com/MasoniteFramework/masonite) - 最新かつ開発者中心の Python Web フレームワーク.
* [Japronto](https://github.com/squeaky-pl/japronto) - Python 3.5 以上で動作する, 驚くほど高速でスケーラブルな非同期の Web マイクロフレームワーク. 秒間 1214440 リクエスト捌くことができる.
* [Pyramid](http://pylonsproject.org/) - 小さくて, 速く, 地球に近い, オープンソースの Python Web フレームワーク.
    * [Awesome Pyramid](https://github.com/uralbash/awesome-pyramid)
* [Sanic](https://github.com/channelcat/sanic) - 速くなるように書かれたWebサーバー.
* [Vibora](https://vibora.io/) - Flask にインスパイアされた, 高速, かつ効果的, 非同期の WEB フレームワーク.
* [Tornado](http://www.tornadoweb.org/en/latest/) - Web フレームワークと非同期ネットワーキングライブラリ.


## WebSocket

*WebSocket を扱うためのライブラリ*

* [autobahn-python](https://github.com/crossbario/autobahn-python) - Twisted と [asyncio](https://docs.python.org/3/library/asyncio.html) の Python 用 WebSocket＆WAMP.
* [crossbar](https://github.com/crossbario/crossbar/) - オープンソースのユニファイドアプリケーションルータ (Autobahn の WebSocket と Python のための WAMP).
* [django-channels](https://github.com/django/channels) - Django の開発者に優しい非同期性.
* [django-socketio](https://github.com/stephenmcd/django-socketio) - Django の WebSocket です.
* [WebSocket-for-Python](https://github.com/Lawouach/WebSocket-for-Python) - Python 2 及び 3 のための PyPy と同様の Websocket クライアント及びサーバライブラリ.


# Services

開発を簡素化するオンラインツールと API


## 継続的インテグレーション

*[Awesome CIandCD](https://github.com/ciandcd/awesome-ciandcd#online-build-system) も参照してください*

* [CircleCI](https://circleci.com/) - 非常に高速な並列テストを実行できるCIサービス.
* [Travis CI](https://travis-ci.org) - オープンソースと[プライベート](https://travis-ci.com)プロジェクト用の人気のある CI サービス (GitHub のみ).
* [Vexor CI](https://vexor.io) - 1分あたりの課金モデルを備えたプライベートアプリ用の継続的な統合ツール.
* [Wercker](http://www.wercker.com/) - アプリケーションとマイクロサービスの構築と展開のための Docker ベースのプラットフォーム.


## コードクオリティ

* [Codacy](https://www.codacy.com/) - 自動コードレビューにより, より速くより良いコードを提供できます.
* [Codecov](https://codecov.io/) - コードカバレッジダッシュボード.
* [CodeFactor](https://www.codefactor.io/) - Git の自動化されたコードレビュー.
* [Landscape](https://landscape.io/) - 継続的な Python コードメトリックをホストします.
* [PEP 8 Speaks](https://pep8speaks.com/) - コードスタイルレビューの GitHub インテグレーション.


# リソース

新しい Python ライブラリを発見する


## Podcasts

* [From Python Import Podcast](http://frompythonimportpodcast.com/)
* [Podcast.init](https://podcastinit.com/)
* [Python Bytes](https://pythonbytes.fm)
* [Python Testing](http://pythontesting.net)
* [Radio Free Python](http://radiofreepython.com/)
* [Talk Python To Me](https://talkpython.fm/)
* [Test and Code](https://testandcode.com/)


## Twitter

* [@codetengu](https://twitter.com/codetengu)
* [@getpy](https://twitter.com/getpy)
* [@importpython](https://twitter.com/importpython)
* [@planetpython](https://twitter.com/planetpython)
* [@pycoders](https://twitter.com/pycoders)
* [@pypi](https://twitter.com/pypi)
* [@pythontrending](https://twitter.com/pythontrending)
* [@PythonWeekly](https://twitter.com/PythonWeekly)
* [@TalkPython](https://twitter.com/talkpython)
* [@realpython](https://twitter.com/realpython)


## ウェブサイト

* [/r/CoolGithubProjects](https://www.reddit.com/r/coolgithubprojects/)
* [/r/Python](https://www.reddit.com/r/python)
* [Awesome Python @LibHunt](https://python.libhunt.com)
* [Django Packages](https://www.djangopackages.org/)
* [Full Stack Python](https://www.fullstackpython.com/)
* [Python Cheatsheet](https://www.pythoncheatsheet.org/)
* [Python ZEEF](https://python.zeef.com/alan.richmond)
* [Python 开发社区](https://www.ctolib.com/python/)
* [Real Python](https://realpython.com)
* [Trending Python repositories on GitHub today](https://github.com/trending?l=python)
* [Сообщество Python Программистов](https://python-scripts.com/)


## 週間

http://lvh.me:8000/s/d9e2a3cd3d764360a4c11dc371f73bf9
* [CodeTengu Weekly](https://weekly.codetengu.com/)
* [Import Python Newsletter](http://importpython.com/newsletter/)
* [Pycoder's Weekly](http://pycoders.com/)
* [Python Weekly](http://www.pythonweekly.com/)
* [Python Tricks](https://realpython.com/python-tricks/)
* [Python Bytes](https://pythonbytes.fm)

http://lvh.me:8000/s/508821b28e8544df81f4e1265082150f
